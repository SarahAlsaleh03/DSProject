import static dsproject.Phonebook.events;


public class LinkedList <T>{
    
private Node<T> Head;
private Node<T> current;

public LinkedList (){
Head=current=null;}

public boolean isEmpty(){
return Head==null;}

public boolean Full(){
return false;}

public boolean last(){
return current.next==null;}

public void FindFirst(){
current=Head;}

public void findNext(){
current=current.next;}

public void update (T d){
current.data=d;}

public T retrieve(){
return current.data;}

public void insert (T d){
Node<T> p=new Node<T>(d);
if (Head==null){
Head=p;
current=p;}
else{
p.next= current.next;
current.next=p;
current=p;}
}

public void remove()
{
if (current==Head){
Head=Head.next;
current=current.next;}
else{
Node<T>p=Head;
while(p.next!=current){
p=p.next;}
p.next=current.next;
if(current.next!=null){   
current=current.next;}
else
current=Head;}
}

public boolean search (T X){
Node <T> temp =Head;
while (temp!=null){
if (temp.data.equals (X))
return true;
else
temp=temp.next;}
return false;}

public void display(){
Node c=Head;
while (c!=null){
System.out.print(c.data+" ");
c=c.next;}
}

public void Add_Sorted1(T d){
Node<T> p=new Node<T> (d);
if (Head==null)
{
Head=p;
current=p;
return;
}
else
{
if ( ( (Contact) d).compareTo ( ( (Contact) Head.data) .getContact_name () ) <0)
{
p.next=Head;
Head=p;
return;
}
else{
Node<T>m= Head, k=null;
while(m!=null&& (((Contact) m.data) . compareTo ( ( (Contact) d) .getContact_name ()) <=0)) {
k=m;
m=m.next;}
k.next=p;
p.next=m;
}
}
}



public void Add_Sorted2(T d){
Node<T> p=new Node<T> (d);
if (Head==null)
{
Head=p;
current=p;
return;
}
else
{

if ((  (Contact) d).compareTo  (( (Contact)Head.data)) <0)
{
p.next=Head;
Head=p;
return;
}
else{
Node<T>f= Head, h=null;
while(f!=null&& (((Contact) h.data).compareTo ( (Contact) d) <=0)) {
h=f;
f=f.next;}
h.next=h;
h.next=f;

}

}}


public void Add_Sorted_event (Event t)
{
if (events.isEmpty())
{
events.insert(t);
return;
}
else
{
events. FindFirst();
if (t.compareTo(events.retrieve ().getContact_name()) <0)
{
Contact c=new Contact(events.retrieve());
events.update (t);
events.insert (c);
return;
}
else{
while (!events. last () && (events.retrieve ().compareTo(t.getContact_name()) <=0)) {
events.findNext();
}
if (events.retrieve ().compareTo(t.getContact_name())>0)
{
    Event e=new Event (events.retrieve());
events.update (t);
events.insert (e);
}
else{
t.toString();
events.insert (t);
}
}
}
}

}
