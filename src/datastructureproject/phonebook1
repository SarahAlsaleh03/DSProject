import java.util.Scanner;
public class Phonebook {
static LinkedList<Contact>contacts;
static LinkedList<Event>events;

 public Phonebook ()
{
contacts=new LinkedList<Contact>();
events=new LinkedList<Event>();
}

public Phonebook (LinkedList<Contact> contacts) {
this.contacts = contacts;
}



//11111as user
public void Add_Sorted_contact (Contact d)
{
if (contacts.isEmpty())
{
contacts.insert(d);
return;
}
else
{
contacts. FindFirst();
if (d.compareTo (contacts.retrieve ().getContact_name()) <0)
{
Contact c=new Contact (contacts.retrieve ());
contacts.update (d);
contacts.insert (c);
return;
}
else{
while (!contacts. last () && (contacts.retrieve ().compareTo (d.getContact_name()) <=0)) {
 contacts.findNext();
}
if (contacts.retrieve ().compareTo(d.getContact_name())>0)
{
Contact c=new Contact (contacts.retrieve ());
contacts.update (d);
contacts.insert (c);
}
else{
//d.display_contact();
contacts.insert (d);
}}}}



////333
public boolean search (Contact c)
{
if (contacts.isEmpty())
return false;
contacts. FindFirst();
while (!contacts.last())
{
if (contacts.retrieve ().getContact_name ().equals (c.getContact_name()) || contacts.retrieve ().getPhone_num().equals (c.getPhone_num())) 
return true;
contacts.findNext();
}
if (contacts.retrieve ().getContact_name().equals (c.getContact_name()) || contacts.retrieve ().getPhone_num().equals (c.getPhone_num())) 
return true;
else
return false;
}

//444
public void add_contact (Contact c)
{
boolean found=search (c);
if (!found){
Add_Sorted_contact(c);
}
}

////5555
public void delete_contact (String n)
{
if (contacts.isEmpty()) {
System.out.println("Empty List can not delete");
return;
}
contacts. FindFirst();
while (!contacts.last())
{
if (contacts.retrieve ().getContact_name ().equals (n)) {
contacts.remove();
System.out.println (n+" contact deleted");
return;
}
contacts.findNext();
}
if (contacts.retrieve ().getContact_name ().equals (n)) {
contacts.remove();
System.out.println (n+" contact deleted");
}
else
System.out.println("can not be deleted bec it is not exist");
}



///666

public Contact search_by_name (String n){
if (contacts.isEmpty())
return null;
contacts. FindFirst();
while (!contacts.last())
{
if (contacts.retrieve ().getContact_name().equals (n))
return contacts.retrieve();
contacts.findNext();
}
if (contacts.retrieve ().getContact_name().equals (n)) 
  return contacts.retrieve();
return null;}




///77
public LinkedList<Contact> search_by_Phone (String ph){
LinkedList<Contact>res= new LinkedList<Contact>();
if (contacts.isEmpty())
return res;
contacts. FindFirst();
while (!contacts. last ())
{
if (contacts.retrieve ().getPhone_num().equals (ph))
  
res.insert (contacts.retrieve ());
contacts.findNext();
}
if (contacts.retrieve ().getPhone_num().equals (ph)) res.insert (contacts.retrieve ());
return res;
}

////888
public Contact search_by_Email (String em){
    

if (contacts.isEmpty())
return null;
contacts. FindFirst();
while (!contacts. last ())
{
if (contacts.retrieve ().getEmail().equals (em))
return contacts.retrieve();
contacts.findNext();
}
if (contacts.retrieve ().getEmail ().equals (em)) 
return contacts.retrieve();
return null;
}


////999
public Contact search_by_Address (String ad){
    
if (contacts.isEmpty())
return null;
contacts. FindFirst();
while (!contacts.last())
{
if (contacts. retrieve ().getAddress().equals (ad))
return contacts.retrieve ();
contacts.findNext();
}
if (contacts.retrieve ().getAddress().equals (ad))
   return contacts.retrieve ();
return null;
}



///10
public Contact search_by_Birth (String Bi){
if (contacts.isEmpty())
return null;
contacts. FindFirst();
while (!contacts.last())
{
if (contacts.retrieve ().getBirthday ().equals (Bi))
return contacts.retrieve();
contacts.findNext();
}
if (contacts.retrieve ().getBirthday ().equals (Bi))
return contacts.retrieve();
return null;
}
///11
public Contact search_by_First_name (String n)
{
if (contacts.isEmpty())
return null;
contacts. FindFirst();
while (! contacts. last ())
{
if (contacts.retrieve ().getContact_name ().equals (n))
    return contacts.retrieve();
contacts.findNext();
}
if (contacts.retrieve().getContact_name().equals (n)) 
    return contacts.retrieve();
return null;
}
//12

public static void print_all_contacts (Phonebook phl)
{
if (phl.contacts.isEmpty()) { 
    System.out.println("empty List");
}
else
{
phl.contacts. FindFirst();
while (!phl.contacts.last())
{
phl.contacts.retrieve () .display_contact();
System.out.println("");
phl.contacts.findNext();
}
phl.contacts.retrieve () .display_contact();
System.out.println("");

}
}
//13
public static void print_Linked_List_contacts_by_name (LinkedList<Contact>L)
{
if (L.isEmpty()) { System.out.println("empty List");}
else
{
L. FindFirst();
while (!L.last())
{
}
System.out.println(L. retrieve ().getContact_name()); 
System.out.println("");
L. findNext();
System.out.println (L. retrieve ().getContact_name());
System.out.println("");
}
}

//14
public void print_Linked_List_of_Events (LinkedList<Event> L)
{
if (L.isEmpty()) { 
   System.out.println("empty List");}
else
{
L. FindFirst();
while (!L.last())
{
//
System.out.println (L. retrieve ());
System.out.println("this event has the following contacts");
L. retrieve ().contacts_with_event.display();
//print_Linked_List_contacts_by_name (L.retrieve ().contacts_with_event);
System.out.println("");
L. findNext();
System.out.println (L. retrieve ());
System.out.println("this event has the following contacts");
print_Linked_List_contacts_by_name(L.retrieve().contacts_with_event);
System.out.println("");
}
}
}
//15
public boolean Search_Event(String title) {
if(events.isEmpty())
    return false;
return true;
}

//16
public Event search_Event_by_Title(String n)
{
if (events.isEmpty())
return null;
events. FindFirst();
while (!events.last())
{
if (events.retrieve ().getEvent_title().equals (n)) return events. retrieve ();
events.findNext();
}
if(events.retrieve().getEvent_title().equals(n))
return events. retrieve();
return null;
}

//17
public void add_Event (Event e){
Event found= search_Event_by_Title (e.getEvent_title());
if (found== null){
events.Add_Sorted_event(e);
}
}

public LinkedList<Contact> getContacts_in_Event(String n)
{
Event this_Event=search_Event_by_Title (n);
if (this_Event!=null)
return this_Event.getContacts_with_event();
return new LinkedList<Contact>();
}
//18
public LinkedList<Event> getEvents_in_contact (String n)
{
Contact this_contact= search_by_name (n);
if (this_contact!=null)
return this_contact.getContact_events();
return new LinkedList<Event>();
}
//19

//20
public boolean is_conflict (Event e, Contact c) { 
LinkedList<Event>contact_events=c.contact_events; 
//or //LinkedList<Event>contact_eventsc.Event_in_contact.events_in_event; 
if (contact_events.isEmpty()){ 
// System.out.println("empty");
 return false; 
//no conflict bec there is not any Events with this contact 
} 
//System.out.println("c="+c); contact_events.display(); //
contact_events. FindFirst(); 
while (!contact_events.last()) 
{ if (e.getEvent_date().equals(contact_events.retrieve().getEvent_date()) &&e.getEvent_time().equals (contact_events. retrieve () .getEvent_time () ))
return true ;//there is a conflict 
contact_events.findNext(); 
}
 if (e.getEvent_date().equals (contact_events. retrieve ().getEvent_date()) &&e.getEvent_time().equals(contact_events.retrieve ().getEvent_time () ) )
 return true; //there is a conflict else return false; //there is not any conflict
else 
return false;
}

//21


public void schedule_event (Event e, String contact_name)
{
Contact this_contact=search_by_name (contact_name);
if (this_contact==null)
{
System.out.println("can not schedule this event bec this contact not Exist"+contact_name);
return;
}
boolean is_conflict=is_conflict (e, this_contact);
if (this_contact!=null && !is_conflict) {
System.out.println("schedulling contact:"+this_contact.getContact_name()+"'"+e.getEvent_title());
//For contact
this_contact.contact_events.Add_Sorted_Event (e); ///// for Event
e.contacts_with_event.Add_Sorted1(this_contact);
////for all
add_Event (e);
//added for requirments
e.setCont (this_contact);
e.setContact_name (contact_name);
this_contact.Event_in_contact=e;//current event in this contact
this_contact.Event_in_contact.events_in_event.Add_Sorted_Event (e);
//OR
e.events_in_event. Add_Sorted_Event (e);
//////////e.events in event. Add Sorted Event (e);
}

else{
if(this_contact==null)
System.out.println("contact in this event does not Exist event title="+e.getEvent_title()+"contact="+contact_name);
if(is_conflict)
System.out.println(" there is conflict event title="+e.getEvent_title()+" contact="+contact_name);

}
}
}


